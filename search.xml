<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pthread线程池</title>
      <link href="/2023/01/03/pthread%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2023/01/03/pthread%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="pthread线程池"><a href="#pthread线程池" class="headerlink" title="pthread线程池"></a>pthread线程池</h1><p>&amp;emsp;线程池是一种线程的使用模式。线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护着多个线程，等待着监督管理者分配可并发执行的任务。这避免了在处理短时间任务时 创建与销毁线程的代价。线程池不仅能保证内核的充分利用，还能防止过度调度。*&#x2F;&#x2F;可用线程数量应该取决于可用的并发处理器、处理器内核、内存、网络sockets等的数量。*</p><p><font size = "4"><strong>• 线程池的优点</strong></font></p><ol><li>当有任务时，能够立刻让进程去处理，省掉了创建进程所需要的时间</li><li>能够有效防止server中线程过多而导致的系统过载的问题</li></ol><p><font size = "4"><strong>• 线程池的应用场景</strong></font></p><ol><li>场景需要大量的进程来完成任务，且完成任务的时间相对较短。(这样的话，使用线程池后，就可以大幅度的提高由于创建线程而消耗的时间)</li><li>对性能的要求苛刻的应用。如：<em>要求服务器迅速响应客户的请求</em></li><li>需要接受<strong>突发性的大量</strong>请求，而不至于使服务器因此产生大量线程的场景。</li></ol><p>&amp;emsp;</p><h2 id="线程池的模拟实现"><a href="#线程池的模拟实现" class="headerlink" title="线程池的模拟实现"></a>线程池的模拟实现</h2><p>&amp;emsp;我们使用线程池的目的是想要提前创建一批线程，让这批线程帮助我们执行任务。具体谈一谈就是：生产者线程从网络中获取任务，然后将任务放到任务队列当中，随后通知消费者线程从任务队列当中取任务，消费者线程在取完任务后处理任务。</p><p><strong>ThreadPool类的成员变量</strong>：</p><ol><li><p>我们需要<strong>一个任务队列</strong>用于存放任务，这里直接使用阻塞队列<code>taskQueue</code>作为任务队列了*(实际上还可以使用环形队列等)*。</p></li><li><p>任务队列是公共资源，那么就要进行保护。因此我们需要<strong>一个互斥锁</strong>mutex。</p></li><li><p>线程池的运作流程是从&amp;ensp;生产者线程获取任务 -&gt; Push到任务队列中 -&gt; 消费者线程Get任务 -&gt; 消费者线程处理任务。在存取任务时，可能会出现任务队列为空的情况，因此我们需要<strong>一个条件变量</strong>cond以让消费者线程在该条件下等待。</p></li></ol><p><strong>注意</strong>：任务队列不可能满！任务队列一旦满了就意味着你的生产者线程无法再获取外界的任务了。一个无法获取任务的服务器就没什么用了。所以我们不需要第二个条件变量让生产者线程等待。</p><p>&amp;emsp;</p><p><font size = "4"><strong>• ThreadPool类成员</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 5    <span class="comment">//NUM是创建的线程的数量</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> taskQueue.<span class="built_in">empty</span>(); &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">LockQueue</span><span class="params">()</span> </span>&#123; <span class="built_in">pthread_mutex_lock</span>(&amp;mtx); &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">UnlockQueue</span><span class="params">()</span> </span>&#123;<span class="built_in">pthread_mutex_unlock</span>(&amp;mtx); &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ThreadWait</span><span class="params">()</span> </span>&#123; <span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;mtx); &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ThreadPool</span>(<span class="type">int</span> num = NUM)</span><br><span class="line">        :<span class="built_in">threadNum</span>(Num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_init</span>(&amp;mtx, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="built_in">pthread_cond_init</span>(&amp;cond, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PoolInit</span><span class="params">()</span></span>;    <span class="comment">//线程池的初始化</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">Routine</span><span class="params">(<span class="type">void</span>* arg)</span></span>;    <span class="comment">//线程的启动函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Get</span><span class="params">(T&amp; task)</span></span>;    <span class="comment">//获取任务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(T&amp; task)</span></span>;    <span class="comment">//放任务</span></span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">ThreadPool</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_destroy</span>(&amp;mtx);</span><br><span class="line">        <span class="built_in">pthread_cond_destroy</span>(&amp;cond);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::queue&lt;T*&gt; taskQueue;<span class="comment">//任务队列</span></span><br><span class="line">    <span class="type">int</span> threadNum;      <span class="comment">//创建的线程的数量</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mtx;  <span class="comment">//互斥锁</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> cond;  <span class="comment">//只有消费者线程需要等待(在任务队列为空的时候等待),而生产者线程不需要等待,因为任务队列一般满不了</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&amp;emsp;</p><p><font size = "4"><strong>• 线程池的初始化</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PoolInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="type">pthread_t</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; threadNum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;t, <span class="literal">nullptr</span>, Routine, <span class="keyword">this</span>);<span class="comment">//传this的原因下面解释</span></span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)                                    </span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;thread create failed!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;emsp;</p><p><font size = "4"><strong>• 消费者线程的启动函数 - 处理任务</strong></font></p><p>&amp;emsp;定义为static的原因在于<code>pthread_create</code>函数要求线程的启动函数参数必须是void*类型的，而类的成员函数的第一个参数都是隐含的this指针，this指针的类型不满足要求，因此我们必须要舍弃this指针，而定义成静态的成员函数就没有this指针了。如果我们想要在静态成员函数中访问非静态的成员的话，只能通过传参的时候传入一个this指针，然后通过this指针去访问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">Routine</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_detach</span>(<span class="built_in">pthread_self</span>()); <span class="comment">//线程分离</span></span><br><span class="line">    ThreadPool&lt;T&gt;* pthis = (ThreadPool&lt;T&gt;*)arg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pthis-&gt;<span class="built_in">LockQueue</span>();</span><br><span class="line">        <span class="comment">//任务队列空的话就让线程等待</span></span><br><span class="line">        <span class="keyword">while</span>(pthis-&gt;<span class="built_in">IsEmpty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">usleep</span>(<span class="number">5000</span>);</span><br><span class="line">            pthis-&gt;<span class="built_in">ThreadWait</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//任务队列不为空，处理任务</span></span><br><span class="line">        T data;</span><br><span class="line">        pthis-&gt;<span class="built_in">Get</span>(data);</span><br><span class="line">        pthis-&gt;<span class="built_in">UnlockQueue</span>();</span><br><span class="line">        data.<span class="built_in">Run</span>();<span class="comment">//每个任务的data都是私有的，因此不需要在临界区处理任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;emsp;</p><p><font size = "4"><strong>• Push 与 Get 任务</strong></font></p><p>&amp;emsp;Get中不需要在进行加锁了，因为消费者线程在调用Get函数时已经处于加锁状态了。有一些线程池的实现中，也会直接省略掉<code>Get()</code>方法，直接在线程工作方法中获取任务了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get</span><span class="params">(T&amp; task)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T* tmp = taskQueue.<span class="built_in">front</span>();</span><br><span class="line">    task = *tmp;</span><br><span class="line">    taskQueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(T&amp; task)</span> <span class="comment">//这里不能加const，const变量无法取地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">LockQueue</span>();</span><br><span class="line">    taskQueue.<span class="built_in">push</span>(&amp;task);</span><br><span class="line">    <span class="built_in">UnlockQueue</span>();</span><br><span class="line">    <span class="built_in">pthread_cond_signal</span>(&amp;cond); <span class="comment">//push一个任务后，要通知一个线程去消化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;emsp;</p><h2 id="线程池测试"><a href="#线程池测试" class="headerlink" title="线程池测试"></a>线程池测试</h2><p><font size = "4"><strong>• Task任务</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Task</span>(<span class="type">int</span> base = <span class="number">10</span>)</span><br><span class="line">        :_base(base)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ThreadID:[&quot;</span>&lt;&lt; <span class="built_in">pthread_self</span>() &lt;&lt; <span class="string">&quot;]&quot;</span>;    </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; Run Task --- Base: &quot;</span> &lt;&lt; _base * _base &lt;&lt; std::endl;    </span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Task</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font size = "4"><strong>• 测试</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************* main.cpp *************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ThreadPool.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    ThreadPool&lt;Task&gt;* tp = <span class="keyword">new</span> <span class="built_in">ThreadPool</span>&lt;Task&gt;();</span><br><span class="line">    tp-&gt;<span class="built_in">PoolInit</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="type">int</span> base = <span class="built_in">rand</span>() % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="function">Task <span class="title">t</span><span class="params">(base)</span></span>;</span><br><span class="line">        tp-&gt;<span class="built_in">Push</span>(t);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/7b38d9771b4b4e148846f1fb5371a891.png" style="zoom:90%;" /><p>&amp;emsp;</p><p>&amp;emsp;</p><h2 id="pthread线程池整体代码"><a href="#pthread线程池整体代码" class="headerlink" title="pthread线程池整体代码"></a>pthread线程池整体代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __THREAD_POOL_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THREAD_POOL_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Task</span>(<span class="type">int</span> base = NUM)</span><br><span class="line">      :_base(base)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;ThreadID:[&quot;</span>&lt;&lt; <span class="built_in">pthread_self</span>() &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot; Run Task --- Base: &quot;</span> &lt;&lt; _base * _base &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Task</span>()&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> q.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义static原因是在传参时并不打算传什么有效的参数</span></span><br><span class="line">    <span class="comment">//但是由于它是类的成员函数，所以会有隐含的this指针</span></span><br><span class="line">    <span class="comment">//传nullptr会报错，所以这里只能定义为static，然后传this指针了</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">Routine</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="built_in">pthread_detach</span>(<span class="built_in">pthread_self</span>());</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        ThreadPool* this_p = (ThreadPool*)arg;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;this_p-&gt;lock);</span><br><span class="line">        <span class="keyword">while</span>(!this_p-&gt;quit &amp;&amp; this_p-&gt;<span class="built_in">isEmpty</span>()) <span class="comment">//quit</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pthread_cond_wait</span>(&amp;this_p-&gt;cond, &amp;this_p-&gt;lock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程退出时，有可能队列为空，所以要判断一下，为空就不能取数据了</span></span><br><span class="line">        <span class="keyword">if</span>(!this_p-&gt;<span class="built_in">isEmpty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">          T data;</span><br><span class="line">          this_p-&gt;<span class="built_in">Get</span>(data);</span><br><span class="line">          <span class="built_in">pthread_mutex_unlock</span>(&amp;this_p-&gt;lock);</span><br><span class="line">          data.<span class="built_in">Run</span>(); <span class="comment">//Run任务的之前，最好先解锁！因为线程运行到这里时，</span></span><br><span class="line">        &#125;             <span class="comment">//并没有访问什么临界资源，这里的data是线程私有的部分，所以可以先解锁</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">pthread_mutex_unlock</span>(&amp;this_p-&gt;lock);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//在测试线程池前，自己调用初始化函数 (不在构造函数中搞这个，因为有风险)</span></span><br><span class="line">    <span class="comment">//万一在构造函数中创建失败了，那已经创建的对象怎么办? 空间浪费了</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">PoolInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="type">pthread_t</span> tid;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; max_cap; ++i)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">nullptr</span>, Routine, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;thread create error!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ThreadPool</span>(<span class="type">size_t</span> _cap = NUM)</span><br><span class="line">      :<span class="built_in">max_cap</span>(_cap),</span><br><span class="line">       <span class="built_in">quit</span>(<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">pthread_mutex_init</span>(&amp;lock, <span class="literal">nullptr</span>);</span><br><span class="line">      <span class="built_in">pthread_cond_init</span>(&amp;cond, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Get</span><span class="params">(T&amp; data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//Get这里并不需要加锁，因为消费者线程在调用Get之前，</span></span><br><span class="line">      <span class="comment">//已经是加锁的状态了</span></span><br><span class="line">      T* tmp = q.<span class="built_in">front</span>();</span><br><span class="line">      data = *tmp;  </span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Put</span><span class="params">(T&amp; data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="built_in">pthread_mutex_lock</span>(&amp;lock);</span><br><span class="line">      q.<span class="built_in">push</span>(&amp;data);</span><br><span class="line">      <span class="built_in">pthread_mutex_unlock</span>(&amp;lock);</span><br><span class="line">      <span class="built_in">pthread_cond_signal</span>(&amp;cond);<span class="comment">//放入一个任务后，叫醒一个消费者</span></span><br><span class="line">                                 <span class="comment">//不然消费者会一直处于挂起</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ThreadQuit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      quit = <span class="literal">true</span>;  <span class="comment">//退出状态设为true</span></span><br><span class="line">      <span class="keyword">while</span>(!<span class="built_in">isEmpty</span>())</span><br><span class="line">        <span class="built_in">pthread_cond_broadcast</span>(&amp;cond);<span class="comment">//持续唤醒所有线程，直到全部退出</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">ThreadPool</span>()</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">pthread_mutex_destroy</span>(&amp;lock);</span><br><span class="line">      <span class="built_in">pthread_cond_destroy</span>(&amp;cond);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::queue&lt;T*&gt; q;  <span class="comment">//生产者线程和消费者线程之间进行交互的队列</span></span><br><span class="line">    <span class="type">size_t</span> max_cap;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> lock; <span class="comment">//访问临街资源时要加的锁</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> cond;  <span class="comment">//让消费者线程等待的条件变量</span></span><br><span class="line">    <span class="type">bool</span> quit;  <span class="comment">//退出状态</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>